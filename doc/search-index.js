var searchIndex = {};
searchIndex['Parallel_merge'] = {"items":[[0,"","Parallel_merge","Parallel merge sort, using the green library to get scheduled threads."],[3,"merge_sort_parallel","","Takes an array of type T which is cloneable (Clone), can be compared with\nbinary operators like > and < (Ord), is sendable for channels (Send), and\nshowable with println! (Show). Also takes a number of sub arrays as a power\nof two to split the array into. Returns a sorted array of the same type T."],[3,"split","","Takes an array of type T which can be Cloned, and the number of subarrays\nfor it to be broken into. Returns an array of tuples of uints for the array\nto be split into."],[3,"merge_wrapper","","merge_wrapper will repeatedly merge arrays in an array until there\nis only one remaining element. Takes an array of arrays of type T which \nhas the traits Clone and Ord, and returns a single array in an array."],[3,"print_usage","","prints a help message"],[0,"common","",""],[0,"utils","Parallel_merge::common","Commonly used functions"],[3,"linear_search","Parallel_merge::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"number_array_from_file","","Creates an array of type T that implements Ord (ie floats and integers)"],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"],[0,"sort","Parallel_merge::common","Sorting functions"],[3,"insertion_sort","Parallel_merge::common::sort","Insertion sort takes an array of type T which has the Ord and Clone\ntraits. Returns an array of type T that has been sorted. It has two \nloops, one nested in the other. The outer loop sets an immutable \nvariable, val, to the value of the ith index and sets a mutable variable \nj to the value of i - 1. The inner loop executes while j +1 != 0\nthe length of the array and while the value of the jth element is \ngreater than the value of val, and sets the value of the element to\nthe \"right\" of j to the value of the jth element. j is then decremented.\nWhen j is equal to zero and decrments, it will fulfill the first\ntermination condition of the inner while loop. After the termination\nof the inner loop, the element to the right of the jth element is\nassigned the value of val, and i increments."],[3,"selection_sort","","Selection sort takes an array of type T which has the Ord and Clone\ntraits. Returns an array of type T that has been sorted. It has nested\nloops: the outer loop begins with the first element of the array,\nwhile the inner loop compares each element, starting with the ith,\nto the element next to it. If the element is smaller, then that index\nis marked as the smallest, until either another smaller element is found\nor the loop terminates with the last element. After the inner loop\nterminates, the values of the ith index and the index holding the\nsmallest element are swapped, provided they actually differ. i is then\nincremented, and the outer loop proceeds in this fashion until every\nelement has been examined."],[3,"merge_sort","","Merge sort with insertion sort. If you want to use plain merge sort,\npass 1 as an argument for the minimum size. Takes an array of type T\nwhich implements Ord and Clone traits, and returns an array of type T.\nIt recursively slices the given array to two arrays of half that size,\nuntil those arrays are of the minimum length, then calls insertion_sort\nto sort those arrays. Those sorted arrays are then merged until an\narray of equal length to the original is returned. So if you pass\nan array with 128 elements and pass 32 as min_size, it'll split it\ninto two arrays holding 64 elements, then the first array will be split\ninto two arrays holding 32 elements, then those arrays will be sorted\nwith insertion sort, and merged. This will be repeated for the other\narray holding 64 elements, and then these two sorted arrays will\nbe merged and returned."],[3,"merge","","Merge takes two arrays of type T which implements the traits Ord and\nClone, and returns an array of a size equal to the sum of the sizes\nof the arrays passed to it. While each array holds elements, the first\nelement from each is compared, and the lesser of the two will be\npushed onto a result array, and the first element will shifted from\nthe array. Else, whichever array holds elements will successively have\nits first element pushed onto the result and be shifted. Note that\nthis behavior is dependent on the arrays already being sorted, either\nby previous merges or by another method of sorting."]],"paths":[]};
searchIndex['merge_sort'] = {"items":[[0,"","merge_sort","An implementation of merge sort."],[0,"common","",""],[0,"utils","merge_sort::common","Commonly used functions"],[3,"linear_search","merge_sort::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"],[0,"sort","merge_sort::common","Sorting functions"],[3,"insertion_sort","merge_sort::common::sort","Insertion sort takes an array of type T which has the Ord and Clone\ntraits. Returns an array of type T that has been sorted. It has two \nloops, one nested in the other. The outer loop sets an immutable \nvariable, val, to the value of the ith index and sets a mutable variable \nj to the value of i - 1. The inner loop executes while j +1 != 0\nthe length of the array and while the value of the jth element is \ngreater than the value of val, and sets the value of the element to\nthe \"right\" of j to the value of the jth element. j is then decremented.\nWhen j is equal to zero and decrments, it will fulfill the first\ntermination condition of the inner while loop. After the termination\nof the inner loop, the element to the right of the jth element is\nassigned the value of val, and i increments."],[3,"selection_sort","","Selection sort takes an array of type T which has the Ord and Clone\ntraits. Returns an array of type T that has been sorted. It has nested\nloops: the outer loop begins with the first element of the array,\nwhile the inner loop compares each element, starting with the ith,\nto the element next to it. If the element is smaller, then that index\nis marked as the smallest, until either another smaller element is found\nor the loop terminates with the last element. After the inner loop\nterminates, the values of the ith index and the index holding the\nsmallest element are swapped, provided they actually differ. i is then\nincremented, and the outer loop proceeds in this fashion until every\nelement has been examined."],[3,"merge_sort","","Merge sort with insertion sort. If you want to use plain merge sort,\npass 1 as an argument for the minimum size. Takes an array of type T\nwhich implements Ord and Clone traits, and returns an array of type T.\nIt recursively slices the given array to two arrays of half that size,\nuntil those arrays are of the minimum length, then calls insertion_sort\nto sort those arrays. Those sorted arrays are then merged until an\narray of equal length to the original is returned. So if you pass\nan array with 128 elements and pass 32 as min_size, it'll split it\ninto two arrays holding 64 elements, then the first array will be split\ninto two arrays holding 32 elements, then those arrays will be sorted\nwith insertion sort, and merged. This will be repeated for the other\narray holding 64 elements, and then these two sorted arrays will\nbe merged and returned."],[3,"merge","","Merge takes two arrays of type T which implements the traits Ord and\nClone, and returns an array of a size equal to the sum of the sizes\nof the arrays passed to it. While each array holds elements, the first\nelement from each is compared, and the lesser of the two will be\npushed onto a result array, and the first element will shifted from\nthe array. Else, whichever array holds elements will successively have\nits first element pushed onto the result and be shifted. Note that\nthis behavior is dependent on the arrays already being sorted, either\nby previous merges or by another method of sorting."]],"paths":[]};

searchIndex['tempconv'] = {"items":[[0,"","tempconv","Converts decimal integers or floating point numbers of either fahrenheit\nor celsius to celsius or fahrenheit, respectively."],[3,"fahr_to_cels","","Converts a temperature from fahrenheit to celsius."],[3,"cels_to_fahr","","Converts a temperature from celsius to fahrenheit."],[3,"main","","Takes a floating point number from stdin followed by C or F to show\nthe scale."],[0,"common","",""],[0,"utils","tempconv::common","Commonly used functions"],[3,"linear_search","tempconv::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"]],"paths":[]};

searchIndex['binary_search'] = {"items":[[0,"","binary_search",""],[0,"common","",""],[0,"utils","binary_search::common","Commonly used functions"],[3,"linear_search","binary_search::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"],[0,"search","binary_search::common","Search functions."],[3,"linear_search","binary_search::common::search","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"binary_search","",""],[3,"naive_string_search","",""],[3,"kmp_string_search","",""],[3,"boyer_moore","","Takes an array of strings and a key, returns a boolean to indicate if the\nstring was found, the index of the string in which it was found,\nand the index of that string at which it was found."],[3,"compare_strings","",""],[3,"reverse_search","","Reverse iterates through the two strings; they key and the string\nwe're searching. Returns whether or not  we found a match and an unsigned\ninteger to advance the slicing point."],[3,"rubin_karp","","Takes an array of strings and successively iterates through each string.\nOn each iteration, it compares the hash of a substring of equal length\nto the key to the hash of the key, and terminates either when a match\nis found or if all possibilities are exhausted. Returns a boolean\nto indicate if it was found, the index (uint) of the array holding\nthe string in which it was found, and the index (uint) of that\nstring at which the matching substring begins."]],"paths":[]};

searchIndex['boyer_moore'] = {"items":[[0,"","boyer_moore","Boyer Moore string search, simplified. No good suffix rule here."],[3,"print_usage","",""],[3,"main","",""],[0,"common","",""],[0,"utils","boyer_moore::common","Commonly used functions"],[3,"linear_search","boyer_moore::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"],[0,"search","boyer_moore::common","Search functions."],[3,"linear_search","boyer_moore::common::search","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"binary_search","",""],[3,"naive_string_search","",""],[3,"kmp_string_search","",""],[3,"boyer_moore","","Takes an array of strings and a key, returns a boolean to indicate if the\nstring was found, the index of the string in which it was found,\nand the index of that string at which it was found."],[3,"compare_strings","",""],[3,"reverse_search","","Reverse iterates through the two strings; they key and the string\nwe're searching. Returns whether or not  we found a match and an unsigned\ninteger to advance the slicing point."]],"paths":[]};

searchIndex['Rabin-Karp'] = {"items":[[0,"","Rabin-Karp",""],[3,"print_usage","",""],[3,"rubin_karp","","Takes an array of strings and successively iterates through each string.\nOn each iteration, it compares the hash of a substring of equal length\nto the key to the hash of the key, and terminates either when a match\nis found or if all possibilities are exhausted. Returns a boolean\nto indicate if it was found, the index (uint) of the array holding\nthe string in which it was found, and the index (uint) of that\nstring at which the matching substring begins."],[0,"common","",""],[0,"utils","Rabin-Karp::common","Commonly used functions"],[3,"linear_search","Rabin-Karp::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"]],"paths":[]};

searchIndex['size'] = {"items":[[0,"","size","Turns a file with a list of file sizes into a total size\nExpects a file that has the descriptions of the files split line by line.\nAllows paramaters from stdin. Without that input, it will prompt the user\nfor a file. The user can specify whether or not to include a table showing\nthe size of each file formatted to Megabytes. The total size can be shown\nin Kilobytes, Megabytes, or Gigabytes."],[0,"common","",""],[0,"utils","size::common","Commonly used functions"],[3,"linear_search","size::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"]],"paths":[]};

searchIndex['fibonacci'] = [{ty:"mod",name:"",path:"fibonacci",desc:"Returns the nth element of the fibonacci sequence."},{ty:"fn",name:"fib",path:"fibonacci",desc:"Creates an array with elements that are from the fibonacci\nsequence. Takes an argument for how many elements to generate."},{ty:"fn",name:"main",path:"fibonacci",desc:""},{ty:"mod",name:"common",path:"fibonacci",desc:""},{ty:"mod",name:"utils",path:"fibonacci::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"fibonacci::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"fibonacci::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"fibonacci::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"fibonacci::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"fibonacci::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"fibonacci::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"fibonacci::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"fibonacci::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"fibonacci::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"fibonacci::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"fibonacci::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"fibonacci::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"fibonacci::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"fibonacci::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['fibonacci'] = {'383':{type:'fn',name:'array_gen'},'1376':{type:'fn',name:'fib'},'644':{type:'fn',name:'int_array_from_file'},'1081':{type:'fn',name:'parse_chars_to_string'},'5':{type:'mod',name:'utils'},'349':{type:'fn',name:'float_getter'},'1131':{type:'fn',name:'parse_date'},'93':{type:'fn',name:'answer_to_bool'},'898':{type:'fn',name:'parse_string_to_float'},'20':{type:'fn',name:'linear_search'},'3':{type:'mod',name:'common'},'1502':{type:'fn',name:'main'},'733':{type:'fn',name:'uint_array_from_file'},'224':{type:'fn',name:'check_args'},'122':{type:'fn',name:'string_getter'},'803':{type:'fn',name:'float_array_from_file'},'0':{type:'mod',name:'fibonacci'},'1037':{type:'fn',name:'parse_string_to_chars'},'447':{type:'fn',name:'array_from_file'}};

searchIndex['kmp_stringsearch'] = [{ty:"mod",name:"",path:"kmp_stringsearch",desc:"An implementation of the Knuth-Morris-Pratt string search algorithm.\nI think. I didn't read it too carefully, so this might not actually capture\nthe spirit of it, but it works, and it's faster than naive string search."},{ty:"mod",name:"common",path:"kmp_stringsearch",desc:""},{ty:"mod",name:"utils",path:"kmp_stringsearch::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"kmp_stringsearch::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"kmp_stringsearch::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"kmp_stringsearch::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"kmp_stringsearch::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"kmp_stringsearch::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"kmp_stringsearch::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"kmp_stringsearch::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"kmp_stringsearch::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"kmp_stringsearch::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"kmp_stringsearch::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"kmp_stringsearch::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"kmp_stringsearch::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['kmp_stringsearch'] = {'904':{type:'fn',name:'parse_string_to_float'},'809':{type:'fn',name:'float_array_from_file'},'128':{type:'fn',name:'string_getter'},'355':{type:'fn',name:'float_getter'},'9':{type:'mod',name:'common'},'1137':{type:'fn',name:'parse_date'},'99':{type:'fn',name:'answer_to_bool'},'11':{type:'mod',name:'utils'},'1087':{type:'fn',name:'parse_chars_to_string'},'389':{type:'fn',name:'array_gen'},'0':{type:'mod',name:'kmp_stringsearch'},'26':{type:'fn',name:'linear_search'},'650':{type:'fn',name:'int_array_from_file'},'1043':{type:'fn',name:'parse_string_to_chars'},'453':{type:'fn',name:'array_from_file'},'230':{type:'fn',name:'check_args'},'739':{type:'fn',name:'uint_array_from_file'}};

initSearch(searchIndex);
