var searchIndex = {};
searchIndex['Rabin-Karp'] = {"items":[[0,"","Rabin-Karp",""],[3,"print_usage","",""],[3,"rubin_karp","","Takes an array of strings and successively iterates through each string.\nOn each iteration, it compares the hash of a substring of equal length\nto the key to the hash of the key, and terminates either when a match\nis found or if all possibilities are exhausted. Returns a boolean\nto indicate if it was found, the index (uint) of the array holding\nthe string in which it was found, and the index (uint) of that\nstring at which the matching substring begins."],[0,"common","",""],[0,"utils","Rabin-Karp::common","Commonly used functions"],[3,"linear_search","Rabin-Karp::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"]],"paths":[]};
searchIndex['size'] = {"items":[[0,"","size","Turns a file with a list of file sizes into a total size\nExpects a file that has the descriptions of the files split line by line.\nAllows paramaters from stdin. Without that input, it will prompt the user\nfor a file. The user can specify whether or not to include a table showing\nthe size of each file formatted to Megabytes. The total size can be shown\nin Kilobytes, Megabytes, or Gigabytes."],[0,"common","",""],[0,"utils","size::common","Commonly used functions"],[3,"linear_search","size::common::utils","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],[3,"answer_to_bool","","Takes a yes or no answer in string form and returns a boolean value."],[3,"string_getter","","Returns a string in response to a question."],[3,"check_args","","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],[3,"float_getter","","Takes user input and returns a floating point number."],[3,"array_gen","","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],[3,"array_from_file","","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],[3,"int_array_from_file","","Uses array from file to return an array of integers. This\nneeds some more work."],[3,"uint_array_from_file","",""],[3,"float_array_from_file","","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],[3,"parse_string_to_float","","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],[3,"parse_string_to_chars","","Turns an owned string into a vector of chars."],[3,"parse_chars_to_string","","Turns an owned vector of chars into an owned string."],[3,"parse_date","","Parses a string in date format into a tuple of three integers for\nday, month and year"]],"paths":[]};

searchIndex['fibonacci'] = [{ty:"mod",name:"",path:"fibonacci",desc:"Returns the nth element of the fibonacci sequence."},{ty:"fn",name:"fib",path:"fibonacci",desc:"Creates an array with elements that are from the fibonacci\nsequence. Takes an argument for how many elements to generate."},{ty:"fn",name:"main",path:"fibonacci",desc:""},{ty:"mod",name:"common",path:"fibonacci",desc:""},{ty:"mod",name:"utils",path:"fibonacci::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"fibonacci::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"fibonacci::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"fibonacci::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"fibonacci::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"fibonacci::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"fibonacci::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"fibonacci::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"fibonacci::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"fibonacci::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"fibonacci::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"fibonacci::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"fibonacci::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"fibonacci::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"fibonacci::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['fibonacci'] = {'383':{type:'fn',name:'array_gen'},'1376':{type:'fn',name:'fib'},'644':{type:'fn',name:'int_array_from_file'},'1081':{type:'fn',name:'parse_chars_to_string'},'5':{type:'mod',name:'utils'},'349':{type:'fn',name:'float_getter'},'1131':{type:'fn',name:'parse_date'},'93':{type:'fn',name:'answer_to_bool'},'898':{type:'fn',name:'parse_string_to_float'},'20':{type:'fn',name:'linear_search'},'3':{type:'mod',name:'common'},'1502':{type:'fn',name:'main'},'733':{type:'fn',name:'uint_array_from_file'},'224':{type:'fn',name:'check_args'},'122':{type:'fn',name:'string_getter'},'803':{type:'fn',name:'float_array_from_file'},'0':{type:'mod',name:'fibonacci'},'1037':{type:'fn',name:'parse_string_to_chars'},'447':{type:'fn',name:'array_from_file'}};

searchIndex['tempconv'] = [{ty:"mod",name:"",path:"tempconv",desc:"Converts decimal integers or floating point numbers of either fahrenheit\nor celsius to celsius or fahrenheit, respectively."},{ty:"fn",name:"fahr_to_cels",path:"tempconv",desc:"Converts a temperature from fahrenheit to celsius."},{ty:"fn",name:"cels_to_fahr",path:"tempconv",desc:"Converts a temperature from celsius to fahrenheit."},{ty:"fn",name:"main",path:"tempconv",desc:"Takes a floating point number from stdin followed by C or F to show\nthe scale."},{ty:"mod",name:"common",path:"tempconv",desc:""},{ty:"mod",name:"utils",path:"tempconv::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"tempconv::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"tempconv::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"tempconv::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"tempconv::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"tempconv::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"tempconv::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"tempconv::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"tempconv::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"tempconv::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"tempconv::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"tempconv::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"tempconv::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"tempconv::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"tempconv::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['tempconv'] = {'899':{type:'fn',name:'parse_string_to_float'},'1038':{type:'fn',name:'parse_string_to_chars'},'350':{type:'fn',name:'float_getter'},'1377':{type:'fn',name:'fahr_to_cels'},'21':{type:'fn',name:'linear_search'},'804':{type:'fn',name:'float_array_from_file'},'123':{type:'fn',name:'string_getter'},'225':{type:'fn',name:'check_args'},'384':{type:'fn',name:'array_gen'},'0':{type:'mod',name:'tempconv'},'734':{type:'fn',name:'uint_array_from_file'},'1413':{type:'fn',name:'main'},'645':{type:'fn',name:'int_array_from_file'},'1082':{type:'fn',name:'parse_chars_to_string'},'94':{type:'fn',name:'answer_to_bool'},'6':{type:'mod',name:'utils'},'4':{type:'mod',name:'common'},'1395':{type:'fn',name:'cels_to_fahr'},'448':{type:'fn',name:'array_from_file'},'1132':{type:'fn',name:'parse_date'}};

searchIndex['boyer_moore'] = [{ty:"mod",name:"",path:"boyer_moore",desc:"Boyer Moore string search, simplified. No good suffix rule here."},{ty:"fn",name:"print_usage",path:"boyer_moore",desc:""},{ty:"fn",name:"main",path:"boyer_moore",desc:""},{ty:"mod",name:"common",path:"boyer_moore",desc:""},{ty:"mod",name:"utils",path:"boyer_moore::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"boyer_moore::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"boyer_moore::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"boyer_moore::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"boyer_moore::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"boyer_moore::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"boyer_moore::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"boyer_moore::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"boyer_moore::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"boyer_moore::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"boyer_moore::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"boyer_moore::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"boyer_moore::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"boyer_moore::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"boyer_moore::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"},{ty:"mod",name:"search",path:"boyer_moore::common",desc:"Search functions."},{ty:"fn",name:"linear_search",path:"boyer_moore::common::search",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"binary_search",path:"boyer_moore::common::search",desc:""},{ty:"fn",name:"naive_string_search",path:"boyer_moore::common::search",desc:""},{ty:"fn",name:"kmp_string_search",path:"boyer_moore::common::search",desc:""},{ty:"fn",name:"boyer_moore",path:"boyer_moore::common::search",desc:"Takes an array of strings and a key, returns a boolean to indicate if the\nstring was found, the index of the string in which it was found,\nand the index of that string at which it was found."},{ty:"fn",name:"compare_strings",path:"boyer_moore::common::search",desc:""},{ty:"fn",name:"reverse_search",path:"boyer_moore::common::search",desc:"Reverse iterates through the two strings; they key and the string\nwe're searching. Returns whether or not  we found a match and an unsigned\ninteger to advance the slicing point."}];allPaths['boyer_moore'] = {'29':{type:'fn',name:'linear_search'},'1140':{type:'fn',name:'parse_date'},'456':{type:'fn',name:'array_from_file'},'1574':{type:'fn',name:'naive_string_search'},'2080':{type:'fn',name:'compare_strings'},'14':{type:'mod',name:'utils'},'742':{type:'fn',name:'uint_array_from_file'},'12':{type:'mod',name:'common'},'907':{type:'fn',name:'parse_string_to_float'},'2137':{type:'fn',name:'reverse_search'},'1706':{type:'fn',name:'kmp_string_search'},'1851':{type:'fn',name:'boyer_moore'},'1046':{type:'fn',name:'parse_string_to_chars'},'1090':{type:'fn',name:'parse_chars_to_string'},'2249':{type:'fn',name:'print_usage'},'812':{type:'fn',name:'float_array_from_file'},'102':{type:'fn',name:'answer_to_bool'},'653':{type:'fn',name:'int_array_from_file'},'131':{type:'fn',name:'string_getter'},'358':{type:'fn',name:'float_getter'},'1387':{type:'fn',name:'linear_search'},'1460':{type:'fn',name:'binary_search'},'392':{type:'fn',name:'array_gen'},'2395':{type:'fn',name:'main'},'233':{type:'fn',name:'check_args'},'1385':{type:'mod',name:'search'},'0':{type:'mod',name:'boyer_moore'}};

searchIndex['kmp_stringsearch'] = [{ty:"mod",name:"",path:"kmp_stringsearch",desc:"An implementation of the Knuth-Morris-Pratt string search algorithm.\nI think. I didn't read it too carefully, so this might not actually capture\nthe spirit of it, but it works, and it's faster than naive string search."},{ty:"mod",name:"common",path:"kmp_stringsearch",desc:""},{ty:"mod",name:"utils",path:"kmp_stringsearch::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"kmp_stringsearch::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"kmp_stringsearch::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"kmp_stringsearch::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"kmp_stringsearch::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"kmp_stringsearch::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"kmp_stringsearch::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"kmp_stringsearch::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"kmp_stringsearch::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"kmp_stringsearch::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"kmp_stringsearch::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"kmp_stringsearch::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"kmp_stringsearch::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['kmp_stringsearch'] = {'904':{type:'fn',name:'parse_string_to_float'},'809':{type:'fn',name:'float_array_from_file'},'128':{type:'fn',name:'string_getter'},'355':{type:'fn',name:'float_getter'},'9':{type:'mod',name:'common'},'1137':{type:'fn',name:'parse_date'},'99':{type:'fn',name:'answer_to_bool'},'11':{type:'mod',name:'utils'},'1087':{type:'fn',name:'parse_chars_to_string'},'389':{type:'fn',name:'array_gen'},'0':{type:'mod',name:'kmp_stringsearch'},'26':{type:'fn',name:'linear_search'},'650':{type:'fn',name:'int_array_from_file'},'1043':{type:'fn',name:'parse_string_to_chars'},'453':{type:'fn',name:'array_from_file'},'230':{type:'fn',name:'check_args'},'739':{type:'fn',name:'uint_array_from_file'}};

initSearch(searchIndex);
