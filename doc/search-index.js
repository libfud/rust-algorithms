var searchIndex = {}; var allPaths = {};
searchIndex['kmp_stringsearch'] = [{ty:"mod",name:"",path:"kmp_stringsearch",desc:"An implementation of the Knuth-Morris-Pratt string search algorithm.\nI think. I didn't read it too carefully, so this might not actually capture\nthe spirit of it, but it works, and it's faster than naive string search."},{ty:"mod",name:"common",path:"kmp_stringsearch",desc:""},{ty:"mod",name:"utils",path:"kmp_stringsearch::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"kmp_stringsearch::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"kmp_stringsearch::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"kmp_stringsearch::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"kmp_stringsearch::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"kmp_stringsearch::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"kmp_stringsearch::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"kmp_stringsearch::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"kmp_stringsearch::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"kmp_stringsearch::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"kmp_stringsearch::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"kmp_stringsearch::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"kmp_stringsearch::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"kmp_stringsearch::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['kmp_stringsearch'] = {'904':{type:'fn',name:'parse_string_to_float'},'809':{type:'fn',name:'float_array_from_file'},'128':{type:'fn',name:'string_getter'},'355':{type:'fn',name:'float_getter'},'9':{type:'mod',name:'common'},'1137':{type:'fn',name:'parse_date'},'99':{type:'fn',name:'answer_to_bool'},'11':{type:'mod',name:'utils'},'1087':{type:'fn',name:'parse_chars_to_string'},'389':{type:'fn',name:'array_gen'},'0':{type:'mod',name:'kmp_stringsearch'},'26':{type:'fn',name:'linear_search'},'650':{type:'fn',name:'int_array_from_file'},'1043':{type:'fn',name:'parse_string_to_chars'},'453':{type:'fn',name:'array_from_file'},'230':{type:'fn',name:'check_args'},'739':{type:'fn',name:'uint_array_from_file'}};
searchIndex['boyer_moore'] = [{ty:"mod",name:"",path:"boyer_moore",desc:"Boyer Moore string search, simplified. No good suffix rule here."},{ty:"mod",name:"common",path:"boyer_moore",desc:""},{ty:"mod",name:"utils",path:"boyer_moore::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"boyer_moore::common::utils",desc:"generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."},{ty:"fn",name:"answer_to_bool",path:"boyer_moore::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"boyer_moore::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"boyer_moore::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"boyer_moore::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"boyer_moore::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"boyer_moore::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"boyer_moore::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"boyer_moore::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"boyer_moore::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"boyer_moore::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"boyer_moore::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"boyer_moore::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"boyer_moore::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['boyer_moore'] = {'360':{type:'fn',name:'float_getter'},'14':{type:'mod',name:'common'},'16':{type:'mod',name:'utils'},'235':{type:'fn',name:'check_args'},'655':{type:'fn',name:'int_array_from_file'},'394':{type:'fn',name:'array_gen'},'458':{type:'fn',name:'array_from_file'},'1092':{type:'fn',name:'parse_chars_to_string'},'104':{type:'fn',name:'answer_to_bool'},'31':{type:'fn',name:'linear_search'},'133':{type:'fn',name:'string_getter'},'909':{type:'fn',name:'parse_string_to_float'},'1048':{type:'fn',name:'parse_string_to_chars'},'744':{type:'fn',name:'uint_array_from_file'},'814':{type:'fn',name:'float_array_from_file'},'0':{type:'mod',name:'boyer_moore'},'1142':{type:'fn',name:'parse_date'}};

searchIndex['size'] = [{ty:"mod",name:"",path:"size",desc:"Turns a file with a list of file sizes into a total size\nExpects a file that has the descriptions of the files split line by line.\nAllows paramaters from stdin. Without that input, it will prompt the user\nfor a file. The user can specify whether or not to include a table showing\nthe size of each file formatted to Megabytes. The total size can be shown\nin Kilobytes, Megabytes, or Gigabytes."},{ty:"mod",name:"common",path:"size",desc:""},{ty:"mod",name:"utils",path:"size::common",desc:"Commonly used functions"},{ty:"fn",name:"linear_search",path:"size::common::utils",desc:"generic linear search"},{ty:"fn",name:"answer_to_bool",path:"size::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"size::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"check_args",path:"size::common::utils",desc:"Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"},{ty:"fn",name:"float_getter",path:"size::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"size::common::utils",desc:"Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"size::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"size::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"uint_array_from_file",path:"size::common::utils",desc:""},{ty:"fn",name:"float_array_from_file",path:"size::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"size::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"size::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"size::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"size::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];allPaths['size'] = {'354':{type:'fn',name:'float_getter'},'25':{type:'fn',name:'linear_search'},'738':{type:'fn',name:'uint_array_from_file'},'649':{type:'fn',name:'int_array_from_file'},'8':{type:'mod',name:'common'},'0':{type:'mod',name:'size'},'1042':{type:'fn',name:'parse_string_to_chars'},'127':{type:'fn',name:'string_getter'},'903':{type:'fn',name:'parse_string_to_float'},'10':{type:'mod',name:'utils'},'388':{type:'fn',name:'array_gen'},'452':{type:'fn',name:'array_from_file'},'808':{type:'fn',name:'float_array_from_file'},'1086':{type:'fn',name:'parse_chars_to_string'},'1136':{type:'fn',name:'parse_date'},'98':{type:'fn',name:'answer_to_bool'},'229':{type:'fn',name:'check_args'}};

initSearch(searchIndex);
