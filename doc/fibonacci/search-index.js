var searchIndex = [{ty:"mod",name:"",path:"fibonacci",desc:"Returns the nth element of the fibonacci sequence."},{ty:"mod",name:"common",path:"fibonacci",desc:""},{ty:"mod",name:"utils",path:"fibonacci::common",desc:"Commonly used functions"},{ty:"fn",name:"answer_to_bool",path:"fibonacci::common::utils",desc:"Takes a yes or no answer in string form and returns a boolean value."},{ty:"fn",name:"string_getter",path:"fibonacci::common::utils",desc:"Returns a string in response to a question."},{ty:"fn",name:"number_getter",path:"fibonacci::common::utils",desc:"Takes user input and returns an integer."},{ty:"fn",name:"float_getter",path:"fibonacci::common::utils",desc:"Takes user input and returns a floating point number."},{ty:"fn",name:"array_gen",path:"fibonacci::common::utils",desc:"Geneerates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."},{ty:"fn",name:"array_from_file",path:"fibonacci::common::utils",desc:"Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."},{ty:"fn",name:"int_array_from_file",path:"fibonacci::common::utils",desc:"Uses array from file to return an array of integers. This\nneeds some more work."},{ty:"fn",name:"float_array_from_file",path:"fibonacci::common::utils",desc:"Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "},{ty:"fn",name:"parse_string_to_float",path:"fibonacci::common::utils",desc:"Takes an owned string and returns a floating point numbger\nand an owned string, if possible."},{ty:"fn",name:"parse_string_to_chars",path:"fibonacci::common::utils",desc:"Turns an owned string into a vector of chars."},{ty:"fn",name:"parse_chars_to_string",path:"fibonacci::common::utils",desc:"Turns an owned vector of chars into an owned string."},{ty:"fn",name:"parse_date",path:"fibonacci::common::utils",desc:"Parses a string in date format into a tuple of three integers for\nday, month and year"}];var allPaths = {'534':{type:'fn',name:'float_array_from_file'},'391':{type:'fn',name:'array_from_file'},'15':{type:'fn',name:'answer_to_bool'},'637':{type:'fn',name:'parse_string_to_float'},'274':{type:'fn',name:'array_gen'},'848':{type:'fn',name:'parse_chars_to_string'},'238':{type:'fn',name:'float_getter'},'7':{type:'mod',name:'utils'},'0':{type:'mod',name:'fibonacci'},'5':{type:'mod',name:'common'},'202':{type:'fn',name:'number_getter'},'435':{type:'fn',name:'int_array_from_file'},'795':{type:'fn',name:'parse_string_to_chars'},'909':{type:'fn',name:'parse_date'},'45':{type:'fn',name:'string_getter'}};