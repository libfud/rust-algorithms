{"crate":{"externs":[[3,{"attrs":[{"fields":["doc","/*!\nUtilities for random number generation\n\nThe key functions are `random()` and `Rng::gen()`. These are polymorphic\nand so can be used to generate any type that implements `Rand`. Type inference\nmeans that often a simple call to `rand::random()` or `rng.gen()` will\nsuffice, but sometimes an annotation is required, e.g. `rand::random::<f64>()`.\n\nSee the `distributions` submodule for sampling random numbers from\ndistributions like normal and exponential.\n\n# Task-local RNG\n\nThere is built-in support for a RNG associated with each task stored\nin task-local storage. This RNG can be accessed via `task_rng`, or\nused implicitly via `random`. This RNG is normally randomly seeded\nfrom an operating-system source of randomness, e.g. `/dev/urandom` on\nUnix systems, and will automatically reseed itself from this source\nafter generating 32 KiB of random data.\n\n# Cryptographic security\n\nAn application that requires random numbers for cryptographic purposes\nshould prefer `OSRng`, which reads randomness from one of the source\nthat the operating system provides (e.g. `/dev/urandom` on\nUnixes). The other random number generators provided by this module\nare either known to be insecure (`XorShiftRng`), or are not verified\nto be secure (`IsaacRng`, `Isaac64Rng` and `StdRng`).\n\n*Note*: on Linux, `/dev/random` is more secure than `/dev/urandom`,\nbut it is a blocking RNG, and will wait until it has determined that\nit has collected enough entropy to fulfill a request for random\ndata. It can be used with the `Rng` trait provided by this module by\nopening the file and passing it to `reader::ReaderRng`. Since it\nblocks, `/dev/random` should only be used to retrieve small amounts of\nrandomness.\n\n# Examples\n\n```rust\nuse rand::Rng;\n\nlet mut rng = rand::task_rng();\nif rng.gen() { // bool\n    println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n}\n```\n\n```rust\nlet tuple_ptr = rand::random::<~(f64, char)>();\nprintln!(\"{:?}\", tuple_ptr)\n```\n*/"],"variant":"NameValue"},{"fields":["license","MIT/ASL2"],"variant":"NameValue"},{"fields":["crate_type","dylib"],"variant":"NameValue"},{"fields":["crate_type","rlib"],"variant":"NameValue"},{"fields":["doc",[{"fields":["html_logo_url","http://www.rust-lang.org/logos/rust-logo-128x128-blk.png"],"variant":"NameValue"},{"fields":["html_favicon_url","http://www.rust-lang.org/favicon.ico"],"variant":"NameValue"},{"fields":["html_root_url","http://static.rust-lang.org/doc/master"],"variant":"NameValue"}]],"variant":"List"},{"fields":["feature",[{"fields":["macro_rules"],"variant":"Word"},{"fields":["managed_boxes"],"variant":"Word"},{"fields":["phase"],"variant":"Word"}]],"variant":"List"},{"fields":["deny",[{"fields":["deprecated_owned_vector"],"variant":"Word"}]],"variant":"List"},{"fields":["crate_id","rand#0.11-pre"],"variant":"NameValue"}],"name":"rand"}],[4,{"attrs":[{"fields":["doc","/*!\n * Collection types.\n */"],"variant":"NameValue"},{"fields":["crate_type","rlib"],"variant":"NameValue"},{"fields":["crate_type","dylib"],"variant":"NameValue"},{"fields":["license","MIT/ASL2"],"variant":"NameValue"},{"fields":["doc",[{"fields":["html_logo_url","http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png"],"variant":"NameValue"},{"fields":["html_favicon_url","http://www.rust-lang.org/favicon.ico"],"variant":"NameValue"},{"fields":["html_root_url","http://static.rust-lang.org/doc/master"],"variant":"NameValue"}]],"variant":"List"},{"fields":["feature",[{"fields":["macro_rules"],"variant":"Word"},{"fields":["managed_boxes"],"variant":"Word"},{"fields":["default_type_params"],"variant":"Word"},{"fields":["phase"],"variant":"Word"}]],"variant":"List"},{"fields":["deny",[{"fields":["deprecated_owned_vector"],"variant":"Word"}]],"variant":"List"},{"fields":["crate_id","collections#0.11-pre"],"variant":"NameValue"}],"name":"collections"}],[2,{"attrs":[{"fields":["doc","//! # The Rust standard library"],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! The Rust standard library is a group of interrelated modules defining"],"variant":"NameValue"},{"fields":["doc","//! the core language traits, operations on built-in data types,"],"variant":"NameValue"},{"fields":["doc","//! platform abstractions, the task scheduler, runtime support for language"],"variant":"NameValue"},{"fields":["doc","//! features and other common functionality."],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! `std` includes modules corresponding to each of the integer types,"],"variant":"NameValue"},{"fields":["doc","//! each of the floating point types, the `bool` type, tuples, characters,"],"variant":"NameValue"},{"fields":["doc","//! strings (`str`), vectors (`vec`), managed boxes (`managed`), owned"],"variant":"NameValue"},{"fields":["doc","//! boxes (`owned`), and unsafe pointers and references (`ptr`, `borrowed`)."],"variant":"NameValue"},{"fields":["doc","//! Additionally, `std` provides pervasive types (`option` and `result`),"],"variant":"NameValue"},{"fields":["doc","//! task creation and communication primitives (`task`, `comm`), platform"],"variant":"NameValue"},{"fields":["doc","//! abstractions (`os` and `path`), basic I/O abstractions (`io`), common"],"variant":"NameValue"},{"fields":["doc","//! traits (`kinds`, `ops`, `cmp`, `num`, `to_str`), and complete bindings"],"variant":"NameValue"},{"fields":["doc","//! to the C standard library (`libc`)."],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! # Standard library injection and the Rust prelude"],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! `std` is imported at the topmost level of every crate by default, as"],"variant":"NameValue"},{"fields":["doc","//! if the first line of each crate was"],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//!     extern crate std;"],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! This means that the contents of std can be accessed from any context"],"variant":"NameValue"},{"fields":["doc","//! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,"],"variant":"NameValue"},{"fields":["doc","//! etc."],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//! Additionally, `std` contains a `prelude` module that reexports many of the"],"variant":"NameValue"},{"fields":["doc","//! most common types, traits and functions. The contents of the prelude are"],"variant":"NameValue"},{"fields":["doc","//! imported into every *module* by default.  Implicitly, all modules behave as if"],"variant":"NameValue"},{"fields":["doc","//! they contained the following prologue:"],"variant":"NameValue"},{"fields":["doc","//!"],"variant":"NameValue"},{"fields":["doc","//!     use std::prelude::*;"],"variant":"NameValue"},{"fields":["comment","The Rust standard library"],"variant":"NameValue"},{"fields":["license","MIT/ASL2"],"variant":"NameValue"},{"fields":["crate_type","rlib"],"variant":"NameValue"},{"fields":["crate_type","dylib"],"variant":"NameValue"},{"fields":["doc",[{"fields":["html_logo_url","http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png"],"variant":"NameValue"},{"fields":["html_favicon_url","http://www.rust-lang.org/favicon.ico"],"variant":"NameValue"},{"fields":["html_root_url","http://static.rust-lang.org/doc/master"],"variant":"NameValue"}]],"variant":"List"},{"fields":["feature",[{"fields":["macro_rules"],"variant":"Word"},{"fields":["globs"],"variant":"Word"},{"fields":["asm"],"variant":"Word"},{"fields":["managed_boxes"],"variant":"Word"},{"fields":["thread_local"],"variant":"Word"},{"fields":["link_args"],"variant":"Word"},{"fields":["simd"],"variant":"Word"},{"fields":["linkage"],"variant":"Word"},{"fields":["default_type_params"],"variant":"Word"},{"fields":["phase"],"variant":"Word"},{"fields":["concat_idents"],"variant":"Word"}]],"variant":"List"},{"fields":["no_std"],"variant":"Word"},{"fields":["deny",[{"fields":["missing_doc"],"variant":"Word"}]],"variant":"List"},{"fields":["crate_id","std#0.11-pre"],"variant":"NameValue"}],"name":"std"}],[1,{"attrs":[{"fields":["feature",[{"fields":["globs"],"variant":"Word"}]],"variant":"List"},{"fields":["experimental"],"variant":"Word"},{"fields":["no_std"],"variant":"Word"},{"fields":["crate_type","rlib"],"variant":"NameValue"},{"fields":["crate_type","dylib"],"variant":"NameValue"},{"fields":["doc","/*!\n* Bindings for the C standard library and other platform libraries\n*\n* **NOTE:** These are *architecture and libc* specific. On Linux, these\n* bindings are only correct for glibc.\n*\n* This module contains bindings to the C standard library, organized into\n* modules by their defining standard.  Additionally, it contains some assorted\n* platform-specific definitions.  For convenience, most functions and types\n* are reexported, so `use libc::*` will import the available C bindings as\n* appropriate for the target platform. The exact set of functions available\n* are platform specific.\n*\n* *Note:* Because these definitions are platform-specific, some may not appear\n* in the generated documentation.\n*\n* We consider the following specs reasonably normative with respect to\n* interoperating with the C standard library (libc/msvcrt):\n*\n* * ISO 9899:1990 ('C95', 'ANSI C', 'Standard C'), NA1, 1995.\n* * ISO 9899:1999 ('C99' or 'C9x').\n* * ISO 9945:1988 / IEEE 1003.1-1988 ('POSIX.1').\n* * ISO 9945:2001 / IEEE 1003.1-2001 ('POSIX:2001', 'SUSv3').\n* * ISO 9945:2008 / IEEE 1003.1-2008 ('POSIX:2008', 'SUSv4').\n*\n* Note that any reference to the 1996 revision of POSIX, or any revs between\n* 1990 (when '88 was approved at ISO) and 2001 (when the next actual\n* revision-revision happened), are merely additions of other chapters (1b and\n* 1c) outside the core interfaces.\n*\n* Despite having several names each, these are *reasonably* coherent\n* point-in-time, list-of-definition sorts of specs. You can get each under a\n* variety of names but will wind up with the same definition in each case.\n*\n* See standards(7) in linux-manpages for more details.\n*\n* Our interface to these libraries is complicated by the non-universality of\n* conformance to any of them. About the only thing universally supported is\n* the first (C95), beyond that definitions quickly become absent on various\n* platforms.\n*\n* We therefore wind up dividing our module-space up (mostly for the sake of\n* sanity while editing, filling-in-details and eliminating duplication) into\n* definitions common-to-all (held in modules named c95, c99, posix88, posix01\n* and posix08) and definitions that appear only on *some* platforms (named\n* 'extra'). This would be things like significant OSX foundation kit, or win32\n* library kernel32.dll, or various fancy glibc, linux or BSD extensions.\n*\n* In addition to the per-platform 'extra' modules, we define a module of\n* 'common BSD' libc routines that never quite made it into POSIX but show up\n* in multiple derived systems. This is the 4.4BSD r2 / 1995 release, the final\n* one from Berkeley after the lawsuits died down and the CSRG dissolved.\n*/"],"variant":"NameValue"},{"fields":["allow",[{"fields":["non_camel_case_types"],"variant":"Word"}]],"variant":"List"},{"fields":["allow",[{"fields":["non_uppercase_statics"],"variant":"Word"}]],"variant":"List"},{"fields":["allow",[{"fields":["missing_doc"],"variant":"Word"}]],"variant":"List"},{"fields":["allow",[{"fields":["uppercase_variables"],"variant":"Word"}]],"variant":"List"},{"fields":["crate_id","libc#0.11-pre"],"variant":"NameValue"}],"name":"libc"}]],"module":{"attrs":[{"fields":["crate_id","size"],"variant":"NameValue"},{"fields":["doc","Turns a file with a list of file sizes into a total size\nExpects a file that has the descriptions of the files split line by line.\nAllows paramaters from stdin. Without that input, it will prompt the user\nfor a file. The user can specify whether or not to include a table showing\nthe size of each file formatted to Megabytes. The total size can be shown\nin Kilobytes, Megabytes, or Gigabytes."],"variant":"NameValue"}],"id":0,"inner":{"fields":[{"is_crate":true,"items":[{"attrs":[],"id":8,"inner":{"fields":[{"is_crate":false,"items":[{"attrs":[{"fields":["doc","Commonly used functions"],"variant":"NameValue"}],"id":10,"inner":{"fields":[{"is_crate":false,"items":[{"attrs":[{"fields":["doc","generic linear search\nFor any type which allows binary comparisons, it iterates through\nthe array and returns a boolean  for whether or not the key\nwas found, and if true returns the element at which it was found."],"variant":"NameValue"}],"id":25,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":26,"name":"array","type_":{"fields":[null,"Immutable",{"fields":[{"fields":[41],"variant":"Generic"}],"variant":"Vector"}],"variant":"BorrowedRef"}},{"id":32,"name":"key","type_":{"fields":[41],"variant":"Generic"}}]},"output":{"fields":[["Bool",{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}]],"variant":"Tuple"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[{"bounds":[{"fields":[{"fields":[{"global":false,"segments":[{"lifetimes":[],"name":"Eq","types":[]}]},null,["std","cmp","Eq"],"TypeTrait",2],"variant":"ExternalPath"}],"variant":"TraitBound"}],"id":41,"name":"T"}]}}],"variant":"FunctionItem"},"name":"linear_search","source":{"filename":"common/utils.rs","hicol":1,"hiline":30,"locol":0,"loline":15},"visibility":"Public"},{"attrs":[{"fields":["doc","Takes a yes or no answer in string form and returns a boolean value."],"variant":"NameValue"}],"id":98,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":99,"name":"string_orig","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":"Bool"},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"answer_to_bool","source":{"filename":"common/utils.rs","hicol":1,"hiline":39,"locol":0,"loline":33},"visibility":"Public"},{"attrs":[{"fields":["doc","Returns a string in response to a question."],"variant":"NameValue"}],"id":127,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":128,"name":"question","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":["String"],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"string_getter","source":{"filename":"common/utils.rs","hicol":1,"hiline":49,"locol":0,"loline":42},"visibility":"Public"},{"attrs":[{"fields":["doc","Checks arguments against a set of required arguments, returns a bool\nand a hashmap of the arguments"],"variant":"NameValue"}],"id":229,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":230,"name":"args_to_check","type_":{"fields":[{"fields":[{"fields":["String"],"variant":"Unique"}],"variant":"Vector"}],"variant":"Unique"}},{"id":237,"name":"args_given","type_":{"fields":[{"fields":[{"fields":["String"],"variant":"Unique"}],"variant":"Vector"}],"variant":"Unique"}}]},"output":{"fields":[["Bool",{"fields":[{"global":false,"segments":[{"lifetimes":[],"name":"HashMap","types":[{"fields":["String"],"variant":"Unique"},{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}]}]},null,["collections","hashmap","HashMap"],"TypeStruct",4],"variant":"ExternalPath"}]],"variant":"Tuple"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"check_args","source":{"filename":"common/utils.rs","hicol":1,"hiline":77,"locol":0,"loline":53},"visibility":"Public"},{"attrs":[{"fields":["doc","Takes user input and returns a floating point number."],"variant":"NameValue"}],"id":354,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":355,"name":"question","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[{"fields":["TyF64"],"variant":"TyFloat"}],"variant":"Primitive"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"float_getter","source":{"filename":"common/utils.rs","hicol":1,"hiline":87,"locol":0,"loline":80},"visibility":"Public"},{"attrs":[{"fields":["doc","Generates an array with the number of elements specified by size.\nUpper bound limits the size of the numbers generated to itself\ntimes the number of elements requested. For example, if you\nrequest 10 elements and specify an upper bound of 2, you will get\n10 numbers ranging in size from 1 to 20."],"variant":"NameValue"}],"id":388,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":389,"name":"size","type_":{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}},{"id":393,"name":"upper_bound","type_":{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}}]},"output":{"fields":[{"fields":[{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"array_gen","source":{"filename":"common/utils.rs","hicol":1,"hiline":105,"locol":0,"loline":94},"visibility":"Public"},{"attrs":[{"fields":["doc","Facilitates getting data from files in the form of an array\nof strings, each string consisting of one line from the file."],"variant":"NameValue"}],"id":452,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":453,"name":"strpath","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[{"fields":[{"fields":["String"],"variant":"Unique"}],"variant":"Vector"}],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"array_from_file","source":{"filename":"common/utils.rs","hicol":1,"hiline":129,"locol":0,"loline":109},"visibility":"Public"},{"attrs":[{"fields":["doc","Uses array from file to return an array of integers. This\nneeds some more work."],"variant":"NameValue"}],"id":649,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":650,"name":"strpath","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[{"fields":[{"fields":[{"fields":["TyI"],"variant":"TyInt"}],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"int_array_from_file","source":{"filename":"common/utils.rs","hicol":1,"hiline":149,"locol":0,"loline":133},"visibility":"Public"},{"attrs":[],"id":738,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":739,"name":"strpath","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[{"fields":[{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"uint_array_from_file","source":{"filename":"common/utils.rs","hicol":1,"hiline":162,"locol":0,"loline":151},"visibility":"Public"},{"attrs":[{"fields":["doc","Uses array_from_file and parse_string_to_chars and parse_string_to_float\nto return two vectors from a file: one of floating point numbers, and\nanother of owned strings. "],"variant":"NameValue"}],"id":808,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":809,"name":"strpath","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[[{"fields":[{"fields":[{"fields":[{"fields":["TyF64"],"variant":"TyFloat"}],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"},{"fields":[{"fields":[{"fields":["String"],"variant":"Unique"}],"variant":"Vector"}],"variant":"Unique"}]],"variant":"Tuple"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"float_array_from_file","source":{"filename":"common/utils.rs","hicol":1,"hiline":181,"locol":0,"loline":167},"visibility":"Public"},{"attrs":[{"fields":["doc","Takes an owned string and returns a floating point numbger\nand an owned string, if possible."],"variant":"NameValue"}],"id":903,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":904,"name":"string_orig","type_":{"fields":["String"],"variant":"Unique"}}]},"output":{"fields":[[{"fields":[{"fields":["TyF64"],"variant":"TyFloat"}],"variant":"Primitive"},{"fields":["String"],"variant":"Unique"}]],"variant":"Tuple"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"parse_string_to_float","source":{"filename":"common/utils.rs","hicol":1,"hiline":216,"locol":0,"loline":185},"visibility":"Public"},{"attrs":[{"fields":["doc","Turns an owned string into a vector of chars."],"variant":"NameValue"}],"id":1043,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":1044,"name":"string","type_":{"fields":[null,"Immutable","String"],"variant":"BorrowedRef"}}]},"output":{"fields":[{"fields":[{"fields":["TyChar"],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"parse_string_to_chars","source":{"filename":"common/utils.rs","hicol":1,"hiline":225,"locol":0,"loline":219},"visibility":"Public"},{"attrs":[{"fields":["doc","Turns an owned vector of chars into an owned string."],"variant":"NameValue"}],"id":1087,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":1088,"name":"char_string","type_":{"fields":[{"fields":[{"fields":["TyChar"],"variant":"Primitive"}],"variant":"Vector"}],"variant":"Unique"}}]},"output":{"fields":["String"],"variant":"Unique"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"parse_chars_to_string","source":{"filename":"common/utils.rs","hicol":1,"hiline":236,"locol":0,"loline":228},"visibility":"Public"},{"attrs":[{"fields":["doc","Parses a string in date format into a tuple of three integers for\nday, month and year"],"variant":"NameValue"}],"id":1138,"inner":{"fields":[{"decl":{"attrs":[],"cf":"Return","inputs":{"values":[{"id":1139,"name":"string_orig","type_":{"fields":["String"],"variant":"Unique"}}]},"output":{"fields":[[{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"},{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"},{"fields":[{"fields":["TyU"],"variant":"TyUint"}],"variant":"Primitive"}]],"variant":"Tuple"}},"fn_style":"NormalFn","generics":{"lifetimes":[],"type_params":[]}}],"variant":"FunctionItem"},"name":"parse_date","source":{"filename":"common/utils.rs","hicol":1,"hiline":288,"locol":0,"loline":241},"visibility":"Public"}]}],"variant":"ModuleItem"},"name":"utils","source":{"filename":"size.rs","hicol":31,"hiline":13,"locol":17,"loline":13},"visibility":"Public"}]}],"variant":"ModuleItem"},"name":"common","source":{"filename":"size.rs","hicol":33,"hiline":13,"locol":0,"loline":13},"visibility":"Public"}]}],"variant":"ModuleItem"},"name":"","source":{"filename":"size.rs","hicol":0,"hiline":72,"locol":0,"loline":1},"visibility":"Public"},"name":"size"},"plugins":{},"schema":"0.8.1"}